on:
  push:
  pull_request:
  schedule:
    - cron:  '40 4 * * 1'

name: "CI"
jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: macOS-latest, r: 'release'}
          - {os: macOS-latest, r: 'devel'}
          - {os: ubuntu-latest, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/noble/latest"}
          - {os: ubuntu-latest, r: 'oldrel-1', rspm: "https://packagemanager.rstudio.com/cran/__linux__/noble/latest"}
          - {os: ubuntu-latest, r: 'oldrel-2', rspm: "https://packagemanager.rstudio.com/cran/__linux__/noble/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
    steps:
      - uses: actions/checkout@v4
      - uses: r-lib/actions/setup-r@v2
      - uses: r-lib/actions/setup-pandoc@v2
        with:
          pandoc-version: '2.7.3' # The pandoc version to download (if necessary) and use.
      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck
          needs: check
      - name: Check
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: ${{ matrix.config.os }} (${{ matrix.config.r }}) shiny-test
          path: tests/testthat/_snaps/
          retention-days: 5
      - name: Install coverage dependencies
        if: runner.os == 'Linux' && matrix.config.r == 'release'
        run: |
          install.packages(c("remotes"))
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("covr")
        shell: Rscript {0}
      
      - name: Install Rust toolchain for coverage
        if: runner.os == 'Linux' && matrix.config.r == 'release'
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      
      - name: Cache cargo registry and target
        if: runner.os == 'Linux' && matrix.config.r == 'release'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin/cargo-tarpaulin
          key: ${{ runner.os }}-cargo-tarpaulin-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-tarpaulin-
      
      - name: Install cargo-tarpaulin
        if: runner.os == 'Linux' && matrix.config.r == 'release'
        run: |
          if ! command -v cargo-tarpaulin &> /dev/null; then
            echo "Installing cargo-tarpaulin..."
            cargo install cargo-tarpaulin
          else
            echo "cargo-tarpaulin already installed"
          fi
        shell: bash

      - name: Clean coverage files and fix Rust vendor
        if: runner.os == 'Linux' && matrix.config.r == 'release'
        run: |
          # Clean any leftover coverage files and kill hanging processes
          pkill -f "R --slave" || true
          pkill -f "Rscript" || true
          sleep 2
          rm -rf .coverage_temp || true
          rm -f cobertura.xml || true
          rm -f rust-cobertura.xml || true
          rm -f *.gcov *.gcda *.gcno || true
          
          # Fix potential Rust vendor extraction issues that can prevent R package compilation
          echo "Cleaning up Rust vendor directories to prevent compilation conflicts..."
          rm -rf src/rust/vendor/ || true
          rm -rf src/rust/target/ || true
          
        shell: bash

      - name: Test coverage
        if: runner.os == 'Linux' && matrix.config.r == 'release'
        timeout-minutes: 20
        continue-on-error: true
        env:
          MC_CORES: 1
          _R_CHECK_FORCE_SUGGESTS_: false
          R_FUTURE_PLAN: sequential
        run: |
          # Ensure clean R session and disable parallel processing
          options(mc.cores = 1)
          
          # Force sequential execution for future package if it's available
          if (requireNamespace("future", quietly = TRUE)) {
            future::plan("sequential")
            cat("Set future plan to sequential\n")
          }
          
          # Set up signal handlers to ensure cleanup
          cleanup_handler <- function() {
            cat("Cleaning up coverage processes...\n")
            gc()  # Force garbage collection
          }
          
          on.exit(cleanup_handler())
          
          tryCatch({
            cat("Starting coverage generation...\n")
            
            # Ensure package is properly loaded
            library(datefixR)
            cat("Package loaded successfully\n")
            
            # Use minimal coverage options to reduce hanging risk
            # Try with test exclusions first if there are problematic tests
            cov <- tryCatch({
              covr::package_coverage(
                quiet = TRUE,
                clean = TRUE,
                function_exclusions = character(0),
                type = "tests"
              )
            }, error = function(e1) {
              cat("First attempt failed, trying with exclusions...\n")
              cat("Error was:", conditionMessage(e1), "\n")
              # If that fails, try excluding potentially problematic tests
              covr::package_coverage(
                quiet = TRUE,
                clean = TRUE,
                function_exclusions = c("fix_date_native", "fast_path_parse_date"),
                type = "tests",
                line_exclusions = list(
                  "tests/testthat/test_fix_date_df.R" = c(327:375)
                )
              )
            })
            
            cat("Coverage data collected, generating cobertura...\n")
            covr::to_cobertura(cov, filename = "cobertura.xml")
            
            if (file.exists("cobertura.xml")) {
              cat("SUCCESS: cobertura.xml created with size:", file.size("cobertura.xml"), "bytes\n")
            } else {
              cat("WARNING: cobertura.xml was not created by to_cobertura\n")
            }
            
            cat("Coverage generation completed successfully\n")
            cat("Coverage summary:\n")
            print(cov)
            
          }, error = function(e) {
            cat("Coverage generation failed:", conditionMessage(e), "\n")
            cat("Error class:", class(e), "\n")
            cat("Traceback:\n")
            traceback()
            
            # Create an empty cobertura.xml to prevent downstream issues
            cat("Creating empty cobertura.xml to prevent downstream issues...\n")
            writeLines(c(
              '<?xml version="1.0" ?>',
              '<coverage version="1.0">',
              '  <packages/>',
              '</coverage>'
            ), 'cobertura.xml')
            
            # Try to kill any hanging processes
            system("pkill -f 'R --slave' || true", ignore.stdout = TRUE, ignore.stderr = TRUE)
            # Don't quit with error status - let the workflow continue
            cat("R coverage failed but workflow will continue\n")
          }, finally = {
            # Ensure cobertura.xml exists (create empty one if needed)
            if (!file.exists("cobertura.xml")) {
              cat("Creating fallback empty cobertura.xml file...\n")
              writeLines(c(
                '<?xml version="1.0" ?>',
                '<coverage version="1.0">',
                '  <packages/>',
                '</coverage>'
              ), 'cobertura.xml')
            }
            
            # Ensure cleanup happens
            gc()
            cat("Coverage process finished.\n")
          })
        shell: Rscript {0}

      - name: Generate Rust coverage
        if: runner.os == 'Linux' && matrix.config.r == 'release'
        timeout-minutes: 15
        run: |
          cd src/rust
          echo "Starting Rust coverage generation..."
          echo "Current working directory: $(pwd)"
          
          # Install build essentials for better linking compatibility
          sudo apt-get update -q
          sudo apt-get install -y build-essential

          # Set up R library path for linking
          export R_HOME=$(R RHOME)
          export LD_LIBRARY_PATH="$R_HOME/lib:$LD_LIBRARY_PATH"
          export PKG_CONFIG_PATH="$R_HOME/lib/pkgconfig:$PKG_CONFIG_PATH"
          
          echo "R_HOME: $R_HOME"
          echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
          echo "Checking for libR.so:"
          find "$R_HOME" -name "libR.so" -o -name "libR.so.*" 2>/dev/null || echo "libR.so not found in R_HOME"
          
          # Ensure we have tests to run
          echo "Available tests:"
          cargo test --list || echo "No tests found or cargo test failed"
          
          # Generate coverage with tarpaulin, outputting to XML (Cobertura) format
          # First verify tests compile and run successfully
          if ! cargo test; then
            echo "Tests failed to compile or run, skipping coverage generation"
            exit 1
          fi
          echo "Tests passed, proceeding with coverage..."
          echo "Running tarpaulin..."
          
          # Clean any existing Rust cobertura files to avoid conflicts
          # Note: Don't remove ../../cobertura.xml as it may be the R coverage file
          rm -f cobertura.xml ../../rust-cobertura.xml
          
          cargo tarpaulin --verbose --workspace --timeout 180 --engine llvm \
            --exclude-files vendor/ \
            --out Xml \
            --follow-exec \
            || { echo "Tarpaulin failed, trying with simpler options..."; \
                 cargo tarpaulin --out Xml --engine llvm --timeout 120; }
          
          # Move the generated cobertura.xml to the project root with rust prefix
          if [ -f "cobertura.xml" ]; then
            mv "cobertura.xml" "../../rust-cobertura.xml"
            echo "Moved cobertura.xml to ../../rust-cobertura.xml"
          else
            echo "Warning: No cobertura.xml file found after tarpaulin run"
            echo "This is expected if Rust coverage generation failed"
            # NOTE: Do NOT move ../../cobertura.xml as that would overwrite the R coverage file!
          fi
          
          echo "Rust coverage generation completed"
          echo "Checking if coverage file was created..."
          if [ -f "../../rust-cobertura.xml" ]; then
            echo "✓ Coverage file created successfully"
            ls -la ../../rust-cobertura.xml
          else
            echo "✗ Coverage file was not created"
            ls -la ../../*cobertura* || echo "No cobertura files found"
          fi
          
          cd ../..
        shell: bash

      - name: Final process cleanup
        if: runner.os == 'Linux' && matrix.config.r == 'release' && always()
        run: |
          # Kill any remaining R processes that might be hanging
          pkill -f "R --slave" || true
          pkill -f "Rscript" || true
          pkill -9 -f "covr" || true
          ps aux | grep -E "(R --slave|Rscript|covr)" | grep -v grep || true
        shell: bash

      - name: Verify coverage files exist
        if: runner.os == 'Linux' && matrix.config.r == 'release'
        run: |
          echo "Checking for coverage files..."
          if [ -f "cobertura.xml" ]; then
            echo "✓ R coverage file found: cobertura.xml ($(wc -c < cobertura.xml) bytes)"
            ls -la cobertura.xml
          else
            echo "✗ R coverage file NOT found: cobertura.xml"
          fi
          
          if [ -f "rust-cobertura.xml" ]; then
            echo "✓ Rust coverage file found: rust-cobertura.xml ($(wc -c < rust-cobertura.xml) bytes)"
            ls -la rust-cobertura.xml
          else
            echo "✗ Rust coverage file NOT found: rust-cobertura.xml"
          fi
          
          echo "Coverage files verification completed."
          
          # Show sample content of coverage files for debugging
          if [ -f "cobertura.xml" ]; then
            echo "R coverage file preview (first 10 lines):"
            head -10 cobertura.xml
          fi
          
          if [ -f "rust-cobertura.xml" ]; then
            echo "Rust coverage file preview (first 10 lines):"
            head -10 rust-cobertura.xml
          fi
        shell: bash

      - name: Upload R coverage to Codecov
        if: runner.os == 'Linux' && matrix.config.r == 'release' && hashFiles('./cobertura.xml') != ''
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false
          files: ./cobertura.xml
          flags: r-code
          plugins: noop
          disable_search: true
          token: ${{ secrets.CODECOV_TOKEN }}
          
      - name: Upload Rust coverage to Codecov
        if: runner.os == 'Linux' && matrix.config.r == 'release' && hashFiles('./rust-cobertura.xml') != ''
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false
          files: ./rust-cobertura.xml
          flags: rust-code
          plugins: noop
          disable_search: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Show testthat output
        if: runner.os == 'Linux' && matrix.config.r == 'release' && always()
        run: |
          ## --------------------------------------------------------------------
          find '${{ runner.temp }}/package' -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-test-failures
          path: ${{ runner.temp }}/package
