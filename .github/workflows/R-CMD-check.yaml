on:
  push:
  pull_request:
  schedule:
    - cron:  '40 4 * * 1'

name: "CI"
jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: windows-latest, r: 'release'}
          - {os: macOS-latest, r: 'release'}
          - {os: macOS-latest, r: 'devel'}
          - {os: ubuntu-latest, r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/noble/latest"}
          - {os: ubuntu-latest, r: 'oldrel-1', rspm: "https://packagemanager.rstudio.com/cran/__linux__/noble/latest"}
          - {os: ubuntu-latest, r: 'oldrel-2', rspm: "https://packagemanager.rstudio.com/cran/__linux__/noble/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
    steps:
      - uses: actions/checkout@v4
      - uses: r-lib/actions/setup-r@v2
      - uses: r-lib/actions/setup-pandoc@v2
        with:
          pandoc-version: '2.7.3' # The pandoc version to download (if necessary) and use.
      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck
          needs: check
      - name: Check
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}
      - name: Archive artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: ${{ matrix.config.os }} (${{ matrix.config.r }}) shiny-test
          path: tests/testthat/_snaps/
          retention-days: 5
      - name: Install coverage dependencies
        if: runner.os == 'Linux' && matrix.config.r == 'release'
        run: |
          install.packages(c("remotes"))
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran("covr")
        shell: Rscript {0}

      - name: Clean coverage files
        if: runner.os == 'Linux' && matrix.config.r == 'release'
        run: |
          # Clean any leftover coverage files and kill hanging processes
          pkill -f "R --slave" || true
          pkill -f "Rscript" || true
          sleep 2
          rm -rf .coverage_temp || true
          rm -f cobertura.xml || true
          rm -f *.gcov *.gcda *.gcno || true
        shell: bash

      - name: Test coverage
        if: runner.os == 'Linux' && matrix.config.r == 'release'
        timeout-minutes: 20
        env:
          MC_CORES: 1
          _R_CHECK_FORCE_SUGGESTS_: false
          R_FUTURE_PLAN: sequential
        run: |
          # Ensure clean R session and disable parallel processing
          options(mc.cores = 1)
          
          # Force sequential execution for future package if it's available
          if (requireNamespace("future", quietly = TRUE)) {
            future::plan("sequential")
            cat("Set future plan to sequential\n")
          }
          
          # Set up signal handlers to ensure cleanup
          cleanup_handler <- function() {
            cat("Cleaning up coverage processes...\n")
            gc()  # Force garbage collection
          }
          
          on.exit(cleanup_handler())
          
          tryCatch({
            cat("Starting coverage generation...\n")
            
            # Use minimal coverage options to reduce hanging risk
            # Try with test exclusions first if there are problematic tests
            cov <- tryCatch({
              covr::package_coverage(
                quiet = TRUE,
                clean = TRUE,
                function_exclusions = character(0),
                type = "tests"
              )
            }, error = function(e1) {
              cat("First attempt failed, trying with exclusions...\n")
              # If that fails, try excluding potentially problematic tests
              covr::package_coverage(
                quiet = TRUE,
                clean = TRUE,
                function_exclusions = c("fix_date_native", "fast_path_parse_date"),
                type = "tests",
                line_exclusions = list(
                  "tests/testthat/test_fix_date_df.R" = c(327:375)
                )
              )
            })
            
            cat("Coverage data collected, generating cobertura...\n")
            covr::to_cobertura(cov, filename = "cobertura.xml")
            
            cat("Coverage generation completed successfully\n")
            cat("Coverage summary:\n")
            print(cov)
            
          }, error = function(e) {
            cat("Coverage generation failed:", conditionMessage(e), "\n")
            cat("Error class:", class(e), "\n")
            cat("Traceback:\n")
            traceback()
            
            # Try to kill any hanging processes
            system("pkill -f 'R --slave' || true", ignore.stdout = TRUE, ignore.stderr = TRUE)
            quit(status = 1)
          }, finally = {
            # Ensure cleanup happens
            gc()
            cat("Coverage process finished.\n")
          })
        shell: Rscript {0}

      - name: Final process cleanup
        if: runner.os == 'Linux' && matrix.config.r == 'release' && always()
        run: |
          # Kill any remaining R processes that might be hanging
          pkill -f "R --slave" || true
          pkill -f "Rscript" || true
          pkill -9 -f "covr" || true
          ps aux | grep -E "(R --slave|Rscript|covr)" | grep -v grep || true
        shell: bash

      - uses: codecov/codecov-action@v5
        if: runner.os == 'Linux' && matrix.config.r == 'release'
        with:
          fail_ci_if_error: false
          files: ./cobertura.xml
          plugins: noop
          disable_search: true
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Show testthat output
        if: runner.os == 'Linux' && matrix.config.r == 'release' && always()
        run: |
          ## --------------------------------------------------------------------
          find '${{ runner.temp }}/package' -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-test-failures
          path: ${{ runner.temp }}/package
